#region Script Declarations

[string]$provisioning_folder = "c:\provisioning"
[string]$configuration_folder = "c:\windows\system32\sysprep\configure"

# Set this to $true if verbose logging is required on the output window
# Accepted values are $true and $false
[bool] $VerboseLogging = $true

# Set this to $true if a log file is to be created during the execution
# Accepted values are $true and $false
[bool] $GenerateLogFile = $false

# Name of the logfile to be created
# eg: /root/powershell/script.log
[string] $LogLocation = "c:\windows\provisioning_log.txt"

#endregion Script Declarations	

function provision_template() {
    
    WriteLog -Type 1 -Message "Creating provisioning folder"
    mkdir $provisioning_folder | out-null

    WriteLog -Type 1 -Message "Creating configuration folder"
    mkdir $configuration_folder | out-null
    Copy-Item -Path "e:\configure\*" -Destination $configuration_folder -Recurse

    WriteLog -Type 1 -Message "Installing VMware tools"
    cmd.exe /c "f:\setup64 /s /v /qn REBOOT=ReallySuppress"  

    WriteLog -Type 1 -Message "Configuring Static IP Address"
    [string]$ipconfig = 'netsh interface ipv4 set address name="Ethernet" static {{template.network_ip_address}} {{template.network_subnet}} {{template.network_gateway}}'
    Invoke-Expression $ipconfig
    Start-Sleep -Seconds 5
    [string]$dnsconfig = 'netsh interface ipv4 add dnsserver name="Ethernet" address={{template.network_dns_server}} index=1'
    Invoke-Expression $dnsconfig

    WriteLog -Type 1 -Message "Enabling RDP"
    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
    Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    WriteLog -Type 1 -Message "Disabling IPv6 on all adapters"
    Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6
}

function install_default_applications() {
    WriteLog -Type 1 -Message "Downloading and Installing Google Chrome"
    $app = "$provisioning_folder\chrome.msi"
    curl.exe -slko $app "https://imaging.vlabacademy.local/windows/apps/googlechromestandaloneenterprise64.msi"
    Start-Process msiexec "/i $app /quiet /qn /norestart" -Wait;
}

function seal_template() {

    WriteLog -Type 1 -Message "Downloading and Installing Cumulative Updates"
    $winver = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").DisplayVersion
    $cu = "$provisioning_folder\$winver.msu"
    curl.exe -slko $cu "https://imaging.vlabacademy.local/windows/updates/$winver.msu"
    Start-Process -wait wusa -ArgumentList "/update $cu","/quiet","/norestart"

    WriteLog -Type 1 -Message "Removing Static IP Configuration"
    [string]$ipconfig = 'netsh interface ipv4 set address name="Ethernet" dhcp'
    Invoke-Expression $ipconfig

    WriteLog -Type 1 -Message "Removing provisioning folder"
    Remove-Item -Recurse -Force $provisioning_folder

    WriteLog -Type 1 -Message "Scheduling sysprep on reboot"
    Set-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce" -Name '!sysprep' -Value "c:\windows\system32\sysprep\sysprep /unattend:c:\windows\system32\sysprep\configure\sysprep.xml /generalize /oobe /shutdown"

    WriteLog -Type 1 -Message "Blessing and rebooting the template"
    shutdown /r /t 5
}

function WriteLog () {

    Param ( [byte]$Type, [string]$Message )

    $TimeStamp = Get-Date -Format "dd.MMM.yyyy HH:mm:ss"
    $Time = Get-Date -Format "HH:mm:ss"

    if ($Type -eq 1) {
        if ($VerboseLogging) { Write-Host "[INFO] - $Time - $Message" -ForegroundColor Green }
        $Global:LogFileData += "[INFO] - $TimeStamp - $Message"
        $Global:LogFileData += "`r`n"
    }
    if ($Type -eq 2) {
        if ($VerboseLogging) { Write-Host "[WARNING] - $Time - $Message" -ForegroundColor Yellow }
        $Global:LogFileData += "[WARNING] - $TimeStamp - $Message"
        $Global:LogFileData += "`r`n"
    }
    if ($Type -eq 3) {
        if ($VerboseLogging) { Write-Host "[ERROR] - $Time - $Message" -ForegroundColor Red }
        $Global:LogFileData += "[ERROR] - $TimeStamp - $Message"
        $Global:LogFileData += "`r`n"
    }
}

function Terminate () {
    WriteLog -Type 1 -Message "Script execution complete"
    WriteLog -Type 1 -Message "Stopping execution timer and calculating script run duration"
    $ExecutionTimer.Stop() <# --- Stops the timer to track the total execution time of the script --- #>
    $executionTime = $ExecutionTimer.Elapsed <# --- Calculate the total time taken for script execution --- #>
    WriteLog -Type 1 -Message "Script execution complete. Total execution time is $($executionTime.hours):$($executionTime.minutes):$($executionTime.seconds)"
    Exit
}


#region Script Header

<# --- Generate runtime log data --- #>
[string] $TimeStamp = Get-Date -Format "dd.MMM.yyyy HH:mm:ss"

WriteLog -Type 1 -Message "Template provisioning started at $TimeStamp on $(hostname)"
WriteLog -Type 1 -Message "Gathering runtime information"
WriteLog -Type 1 -Message "ErrorActionPreference has been set to $ErrorActionPreference"
WriteLog -Type 1 -Message "Starting execution timer"
$ExecutionTimer = [Diagnostics.Stopwatch]::StartNew() <# --- Starts a timer to track the total execution time of the script --- #>

#endregion Script Header

provision_template
install_default_applications
seal_template

#region Script Footer

WriteLog -Type 1 -Message "Template provisioning complete"
WriteLog -Type 1 -Message "Stopping execution timer and calculating script run duration"
$ExecutionTimer.Stop() <# --- Stops the timer to track the total execution time of the script --- #>
$executionTime = $ExecutionTimer.Elapsed <# --- Calculate the total time taken for script execution --- #>
WriteLog -Type 1 -Message "Script execution complete. Total execution time is $($executionTime.hours):$($executionTime.minutes):$($executionTime.seconds)"

if ($GenerateLogFile) {
    WriteLog -Type 1 -Message "Generating Execution Log"
    try {

        if (!(Test-Path -path $LogLocation)) { New-Item $LogLocation -Type Directory }

        $LogFile = Join-Path $LogLocation "$ScriptShortName.log"
        
        if (Test-Path -path $LogFile) { Remove-Item $LogFile }

        $Global:LogFileData > $LogFile
        WriteLog -Type 1 -Message "Execution Log saved as $LogFile"
    }
    catch {
        WriteLog -Type 3 -Message "There was a problem in saving the Execution Log"
        WriteLog -Type 3 $_
    }
}

#endregion Script Footer
